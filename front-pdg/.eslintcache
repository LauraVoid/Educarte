[{"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\store\\store.js":"1","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\student\\list-student.js":"2","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\teacher\\add-teacher.js":"3","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\create-message-parent.js":"4","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\task\\add-task.js":"5","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\constants.js":"6","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\StatusMessage.js":"7","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\task\\create-task.js":"8","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\nav-option.js":"9","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\table-teacher.js":"10","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\students-teacher.js":"11","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Topbar\\index.js":"12","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\utils\\axios.js":"13","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\dialog-edit.js":"14","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\student\\table-student.js":"15","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\course\\list-course.js":"16","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\course\\dialog-edit.js":"17","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\App.js":"18","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\Login.js":"19","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\courses\\list-courses.js":"20","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Home\\Home.js":"21","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\message-teacher.js":"22","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\Main.js":"23","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Minimal\\Minimal.js":"24","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\create-teacher.js":"25","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\create-message-parent.js":"26","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\main-banner.js":"27","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\user\\create-student.js":"28","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Institution\\meetings.js":"29","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\student\\dialog-edit.js":"30","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\routes.js":"31","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\singOut.js":"32","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\courses\\create.js":"33","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Institution\\home.js":"34","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\user\\add-student.js":"35","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\create-message-course.js":"36","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\list-messages.js":"37","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\create-message-course.js":"38","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Footer\\index.js":"39","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Footer\\Footer.js":"40","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\feedback.js":"41","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\content.js":"42","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Home\\Content.js":"43","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\themes\\theme.js":"44","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\auth.js":"45","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\meeting-teacher.js":"46","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\configRouter\\RouteWithLayout.js":"47","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\teacher\\list-teacher.js":"48","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Topbar\\Topbar.js":"49","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\resource.js":"50"},{"size":829,"mtime":1617920390358,"results":"51","hashOfConfig":"52"},{"size":2842,"mtime":1617309714825,"results":"53","hashOfConfig":"52"},{"size":1598,"mtime":1617309714825,"results":"54","hashOfConfig":"52"},{"size":1618,"mtime":1619444536115,"results":"55","hashOfConfig":"52"},{"size":1566,"mtime":1617309714825,"results":"56","hashOfConfig":"52"},{"size":117,"mtime":1617473278875,"results":"57","hashOfConfig":"52"},{"size":1329,"mtime":1617473278875,"results":"58","hashOfConfig":"52"},{"size":5155,"mtime":1617309714815,"results":"59","hashOfConfig":"52"},{"size":2937,"mtime":1619444536085,"results":"60","hashOfConfig":"52"},{"size":17922,"mtime":1618528352169,"results":"61","hashOfConfig":"52"},{"size":3859,"mtime":1617309714815,"results":"62","hashOfConfig":"52"},{"size":37,"mtime":1618678057845,"results":"63","hashOfConfig":"52"},{"size":114,"mtime":1614799855656,"results":"64","hashOfConfig":"52"},{"size":8632,"mtime":1617739484478,"results":"65","hashOfConfig":"52"},{"size":18537,"mtime":1618528352168,"results":"66","hashOfConfig":"52"},{"size":20322,"mtime":1620864600757,"results":"67","hashOfConfig":"52"},{"size":7147,"mtime":1620864600756,"results":"68","hashOfConfig":"52"},{"size":473,"mtime":1615130400141,"results":"69","hashOfConfig":"52"},{"size":11300,"mtime":1621458775585,"results":"70","hashOfConfig":"52"},{"size":3701,"mtime":1620864600905,"results":"71","hashOfConfig":"52"},{"size":10999,"mtime":1617309714825,"results":"72","hashOfConfig":"52"},{"size":3983,"mtime":1617309714825,"results":"73","hashOfConfig":"52"},{"size":840,"mtime":1618678057843,"results":"74","hashOfConfig":"52"},{"size":855,"mtime":1617473278885,"results":"75","hashOfConfig":"52"},{"size":7650,"mtime":1618678057840,"results":"76","hashOfConfig":"52"},{"size":9731,"mtime":1619444536085,"results":"77","hashOfConfig":"52"},{"size":3125,"mtime":1617309714815,"results":"78","hashOfConfig":"52"},{"size":13495,"mtime":1621872445014,"results":"79","hashOfConfig":"52"},{"size":3365,"mtime":1620864600751,"results":"80","hashOfConfig":"52"},{"size":9689,"mtime":1618528352167,"results":"81","hashOfConfig":"52"},{"size":3792,"mtime":1620864600905,"results":"82","hashOfConfig":"52"},{"size":112,"mtime":1618698404397,"results":"83","hashOfConfig":"52"},{"size":890,"mtime":1620864600815,"results":"84","hashOfConfig":"52"},{"size":4221,"mtime":1620864600759,"results":"85","hashOfConfig":"52"},{"size":1579,"mtime":1616530367297,"results":"86","hashOfConfig":"52"},{"size":1618,"mtime":1619444536115,"results":"87","hashOfConfig":"52"},{"size":4204,"mtime":1617309714815,"results":"88","hashOfConfig":"52"},{"size":11454,"mtime":1621547235289,"results":"89","hashOfConfig":"52"},{"size":37,"mtime":1616530367297,"results":"90","hashOfConfig":"52"},{"size":1864,"mtime":1616530367297,"results":"91","hashOfConfig":"52"},{"size":13814,"mtime":1621466135137,"results":"92","hashOfConfig":"52"},{"size":2982,"mtime":1621465414817,"results":"93","hashOfConfig":"52"},{"size":3955,"mtime":1621876158822,"results":"94","hashOfConfig":"52"},{"size":543,"mtime":1616628884580,"results":"95","hashOfConfig":"52"},{"size":154,"mtime":1617837163991,"results":"96","hashOfConfig":"52"},{"size":3131,"mtime":1617309714815,"results":"97","hashOfConfig":"52"},{"size":1164,"mtime":1616530367247,"results":"98","hashOfConfig":"52"},{"size":3285,"mtime":1618678057847,"results":"99","hashOfConfig":"52"},{"size":4668,"mtime":1618698404403,"results":"100","hashOfConfig":"52"},{"size":3022,"mtime":1621876436814,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ntl2ch",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"113"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"108"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"113"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"113"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"113"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"113"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\store\\store.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\student\\list-student.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\teacher\\add-teacher.js",[],["215","216"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\create-message-parent.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\task\\add-task.js",[],["217","218"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\constants.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\StatusMessage.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\task\\create-task.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\nav-option.js",["219"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, Typography, Paper, Button } from \"@material-ui/core/\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    marginTop: \"3%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"20%\",\r\n    marginTop: \"10%\",\r\n  },\r\n  button: {\r\n    height: \"150%\",\r\n  },\r\n}));\r\n\r\nconst studentTest = [\r\n  { id: \"1\", name: \"Pepito\", lastname: \"Perez\" },\r\n  { id: \"2\", name: \"Laura Eustaquia\", lastname: \"Rubio\" },\r\n  { id: \"3\", name: \"David Pancrasio\", lastname: \"Huertas\" },\r\n  { id: \"4\", name: \"Douglas\", lastname: \"Lopez\" },\r\n  { id: \"5\", name: \"Juanma\", lastname: \"Cecilia\" },\r\n  { id: \"6\", name: \"David Fides\", lastname: \"Obando\" },\r\n];\r\n\r\nconst NavMessage = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Paper>\r\n        <Grid container>\r\n          <Grid item xs={12} sm={12} alignContent=\"center\" alignItems=\"center\">\r\n            <Typography\r\n              variant=\"h5\"\r\n              style={{ color: \"black\" }}\r\n              className={classes.title}\r\n              align=\"center\"\r\n            >\r\n              Herramientas\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.centrado}>\r\n            <Button\r\n              className={classes.button}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              Mostrar no leídos\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.centrado}>\r\n            <Button\r\n              className={classes.button}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              href=\"/createmessagecourse\"\r\n            >\r\n              Enviar mensaje al curso\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.centrado}>\r\n            <Button\r\n              className={classes.button}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              href=\"/createmessageparent\"\r\n            >\r\n              Enviar mensaje al padre\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.centrado}>\r\n            <Button\r\n              className={classes.button}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              size=\"large\"\r\n            >\r\n              Vaciar bandeja\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // instid: state.auth.instId,\r\n});\r\n\r\nNavMessage.propTypes = {\r\n  // instid: PropTypes.any,\r\n};\r\nexport default connect(mapStateToProps)(NavMessage);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\table-teacher.js",["220","221"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\students-teacher.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Topbar\\index.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\utils\\axios.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\dialog-edit.js",[],["222","223"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\student\\table-student.js",["224","225","226"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Grid, Button } from \"@material-ui/core/\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport axios from \"../../utils/axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\nimport { connect } from \"react-redux\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport DialogEdit from \"./dialog-edit\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  container: {\r\n    overflow: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n    marginTop: \"50px\",\r\n    padding: \"10px\",\r\n    margin: \"10px\",\r\n  },\r\n  progress: {\r\n    position: \"fixed\",\r\n    zIndex: 50,\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"numberregister\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"N° de registro\",\r\n  },\r\n  { id: \"name\", numeric: false, disablePadding: false, label: \"Nombres\" },\r\n  { id: \"lastname\", numeric: false, disablePadding: false, label: \"Apellidos\" },\r\n  {\r\n    id: \"datebirthday\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Fecha de nacimiento\",\r\n  },\r\n  {\r\n    id: \"username\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Usuario\",\r\n  },\r\n  {\r\n    id: \"parent\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Acudiente\",\r\n  },\r\n  {\r\n    id: \"sendMessage\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Enviar mensaje\",\r\n  },\r\n  {\r\n    id: \"editStudent\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Editar\",\r\n  },\r\n  {\r\n    id: \"deleteStudent\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Eliminar\",\r\n  },\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\"></TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"left\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Nutrition\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction EnhancedTable() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [totalResults, setTotalResults] = React.useState(0);\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\"); ///change by other thing\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [reload, setReload] = React.useState(false);\r\n  const [viewProgress, setViewProgress] = React.useState(false);\r\n  const [dense, setDense] = React.useState(true);\r\n  const [openEdit, setOpenEdit] = React.useState(false);\r\n  //Store all student\r\n  const [students, setStudents] = React.useState([]);\r\n\r\n  const [studentSelected, setStudentSelected] = React.useState([]);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleReload = () => {\r\n    setReload(!reload);\r\n  };\r\n\r\n  const handleClickOpen = (row) => {\r\n    setStudentSelected(row);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setOpenEdit(false);\r\n  };\r\n\r\n  const handleClickOpenEdit = (row) => {\r\n    setStudentSelected(row);\r\n    setOpenEdit(true);\r\n  };\r\n\r\n  const getStudents = () => {\r\n    setViewProgress(true);\r\n    axios\r\n      .get(`/student?page=${page}&&limit=${rowsPerPage}`)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setStudents(res.data);\r\n          setViewProgress(false);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setViewProgress(false);\r\n        let message = {\r\n          errorMsg:\r\n            \"Hubo un error al cargar los estudiantes, por favor intente más tarde.\",\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message));\r\n      });\r\n  };\r\n\r\n  const getNumOfStudents = () => {\r\n    let route = `/student/count`;\r\n    axios\r\n      .get(route)\r\n      .then((response) => {\r\n        setTotalResults(response.data.total);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNumOfStudents();\r\n    getStudents();\r\n  }, [page, rowsPerPage]);\r\n\r\n  useEffect(() => {\r\n    getNumOfStudents();\r\n    getStudents();\r\n  }, [reload]);\r\n\r\n  const numOfPages = () => {\r\n    return Math.ceil(totalResults / rowsPerPage);\r\n  };\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = students.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  function deleteStudent() {\r\n    setViewProgress(true);\r\n\r\n    axios\r\n      .delete(`/student/${studentSelected.id}`)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          let sendmessage = {\r\n            errorMsg: \"Estudiante borrado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          setReload(!reload);\r\n          setViewProgress(false);\r\n          setOpen(false);\r\n          dispatch(showMessage(sendmessage));\r\n        } else {\r\n          setOpen(false);\r\n          setViewProgress(false);\r\n          console.log(\"hubo un error\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setOpen(false);\r\n        setViewProgress(false);\r\n        let message1 = \"mensaje\";\r\n        switch (error.response.data.message) {\r\n          case \"The id needs to be specified\": {\r\n            message1 = \"Selecciona un estudiante\";\r\n            break;\r\n          }\r\n          case \"Student probably to have any course\": {\r\n            message1 = \"Fue imposible borrar al estudiante. Inténtalo de nuevo\";\r\n            break;\r\n          }\r\n          default: {\r\n            message1 = \"Algo salió mal. No fue posible borrar el estudiante\";\r\n          }\r\n        }\r\n        let message = {\r\n          errorMsg: message1,\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message));\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <div className={classes.root}>\r\n        <Paper className={classes.paper}>\r\n          <TableContainer>\r\n            <Table\r\n              className={classes.table}\r\n              aria-labelledby=\"tableTitle\"\r\n              size={dense ? \"small\" : \"medium\"}\r\n              aria-label=\"enhanced table\"\r\n            >\r\n              <EnhancedTableHead\r\n                classes={classes}\r\n                numSelected={selected.length}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onSelectAllClick={handleSelectAllClick}\r\n                onRequestSort={handleRequestSort}\r\n                rowCount={students.length}\r\n              />\r\n              <TableBody>\r\n                {stableSort(students, getComparator(order, orderBy)).map(\r\n                  (row, index) => {\r\n                    const isItemSelected = isSelected(students.name);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        onClick={(event) => handleClick(event, row.id)}\r\n                        tabIndex={-1}\r\n                        key={row.id}\r\n                        aria-checked={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\"></TableCell>\r\n                        <TableCell\r\n                          component=\"th\"\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          padding=\"none\"\r\n                          align=\"left\"\r\n                        >\r\n                          {row.idDocument}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{row.name}</TableCell>\r\n                        <TableCell align=\"left\">{row.lastname}</TableCell>\r\n                        <TableCell align=\"left\">{row.dateBirthday}</TableCell>\r\n                        <TableCell align=\"left\">{row.username}</TableCell>\r\n                        <TableCell align=\"left\">\r\n                          <IconButton>\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                          <IconButton>\r\n                            <EmailIcon />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <IconButton>\r\n                            <EditIcon\r\n                              onClick={() => {\r\n                                handleClickOpenEdit(row);\r\n                              }}\r\n                            />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">\r\n                          <IconButton>\r\n                            <DeleteForeverIcon\r\n                              onClick={() => {\r\n                                handleClickOpen(row);\r\n                              }}\r\n                            ></DeleteForeverIcon>\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            style={{ fontSize: \"14px\" }}\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={totalResults}\r\n            labelRowsPerPage=\"Filas por página:\"\r\n            labelDisplayedRows={() =>\r\n              (totalResults === 0 ? 0 : page + 1) +\r\n              \" de \" +\r\n              numOfPages() +\r\n              \" páginas\"\r\n            }\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n        <FormControlLabel\r\n          style={{ color: \"white\" }}\r\n          control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n          label=\"Ajustar tabla\"\r\n        />\r\n        {/* Dialog for delete a student */}\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"responsive-dialog-title\">\r\n            {\"Advertencia\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              ¿Está seguro que desea borrar el estudiante?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button autoFocus onClick={handleClose} color=\"primary\">\r\n              NO\r\n            </Button>\r\n            <Button onClick={deleteStudent} color=\"primary\" autoFocus>\r\n              SÍ\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        {/* Dialog to edit a student */}\r\n        <Dialog\r\n          open={openEdit}\r\n          onClose={handleCloseEdit}\r\n          aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"responsive-dialog-title\">\r\n            {\"Editar estudiante\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              <DialogEdit\r\n                closeEdit={handleCloseEdit}\r\n                reload={reload}\r\n                handleReload={handleReload}\r\n                studentSelected={studentSelected}\r\n              ></DialogEdit>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        </Dialog>\r\n        {viewProgress ? (\r\n          <CircularProgress className={classes.progress}></CircularProgress>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  // instid: state.auth.instId,\r\n});\r\n\r\nEnhancedTable.propTypes = {\r\n  // instid: PropTypes.any,\r\n};\r\nexport default connect(mapStateToProps)(EnhancedTable);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\course\\list-course.js",["227","228","229","230","231","232","233","234"],"import { Grid } from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, lighten } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from '../../utils/axios';\r\nimport EyeButton from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Create';\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DialogEdit from \"./dialog-edit\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport './style/create-course.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n    },\r\n    paper: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: \"rect(0 0 0 0)\",\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: \"hidden\",\r\n        padding: 0,\r\n        position: \"absolute\",\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n    container: {\r\n        overflow: \"auto\",\r\n        marginRight: \"auto\",\r\n        marginLeft: \"auto\",\r\n        marginTop: \"50px\",\r\n        padding: \"10px\",\r\n        margin: \"10px\",\r\n    },\r\n    progress: {\r\n        position: \"fixed\",\r\n        zIndex: 50,\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n    },\r\n}));\r\n\r\nconst course = {\r\n    id: {\r\n        length: {\r\n            maximum: 64,\r\n        },\r\n    },\r\n    name: {\r\n        presence: { allowEmpty: false, message: \"es requerido\" },\r\n        length: {\r\n            maximum: 64,\r\n        },\r\n    }\r\n\r\n};\r\n\r\nconst headCells = [\r\n    {\r\n        id: \"id\",\r\n        numeric: true,\r\n        disablePadding: false,\r\n        label: \"Id\",\r\n    },\r\n    {\r\n        id: \"name\",\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: \"Nombre\",\r\n    },\r\n    {\r\n        id: \"students\",\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: \"Estudiantes\",\r\n    },\r\n    {\r\n        id: \"teacher\",\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: \"Profesor\",\r\n    },\r\n    {\r\n        id: \"edit\",\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: \"Editar\",\r\n    },\r\n    {\r\n        id: \"delete\",\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: \"Borrar\",\r\n    },\r\n\r\n];\r\n\r\nfunction HeadTable(props) {\r\n    const { order, orderBy, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\"></TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? \"left\" : \"left\"}\r\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : \"asc\"}\r\n                            \r\n                        >\r\n                            {headCell.label}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\nHeadTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === \"desc\"\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === \"light\"\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: \"1 1 100%\",\r\n    },\r\n}));\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography\r\n                    className={classes.title}\r\n                    color=\"inherit\"\r\n                    variant=\"subtitle1\"\r\n                    component=\"div\"\r\n                >\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography\r\n                    className={classes.title}\r\n                    variant=\"h6\"\r\n                    id=\"tableTitle\"\r\n                    component=\"div\"\r\n                >\r\n                    Nutrition\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"filter list\">\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n};\r\nfunction EnhancedTableHead(props) {\r\n    const { order, orderBy, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\"></TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? \"left\" : \"left\"}\r\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : \"asc\"}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\nconst ListCourse = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const [courses, setCourses] = useState([]);\r\n    const [courSelected, setCourSelected] = React.useState({});\r\n    const [courseSelected, setCourseSelected] = React.useState({});\r\n    const [dense, setDense] = React.useState(true);\r\n    const [order, setOrder] = React.useState(\"asc\");\r\n    const [reload, setReload] = React.useState(false);\r\n    const [orderBy, setOrderBy] = React.useState(\"id\");\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [activeOpen, setActiveOpen] = React.useState(false);\r\n    const [editCourseOpen, setEditCourseOpen] = React.useState(false);\r\n    const [error, setError]= useState()\r\n\r\n\r\n    const [courseState, setCourseState] = useState({\r\n        isValid: false,\r\n        values: {},\r\n        touched: {},\r\n        errors: {},\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n            axios\r\n                .get(`course/find/` + props.id, {\r\n                    headers: {\r\n                      'x-access-token': props.token\r\n                    }\r\n                  })\r\n                .then((res) => {\r\n                    if (res.status === 200) {\r\n                        \r\n                        setCourses(res.data)\r\n                        \r\n\r\n                    } else console.log(res.status);\r\n                })\r\n                .catch((err) => {\r\n                    if (err.message.includes(\"403\")) {\r\n                      setError(\"Forbidden\")       \r\n          \r\n                    } \r\n                    else if(err.message.includes(\"401\")){\r\n                      setError(\"Unauthorized\") \r\n          \r\n                    }\r\n                  });        \r\n\r\n    }, [reload]);\r\n\r\n    const handleClickActiveOpen = (row) => {\r\n        setCourSelected(row);\r\n        setActiveOpen(true);\r\n    };\r\n    const handleCloseActive = () => {\r\n        setActiveOpen(false);\r\n    };\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === \"asc\";\r\n        setOrder(isAsc ? \"desc\" : \"asc\");\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleClickOpenEdit = (row) => {\r\n        setCourseSelected(row);\r\n        setEditCourseOpen(true);\r\n\r\n    }    \r\n    const handleReload = () => {\r\n        setReload(!reload);\r\n    }\r\n    const handleCloseEdit = () => {\r\n        setEditCourseOpen(false);\r\n\r\n    }\r\n\r\n   \r\n    function deleteCourse() {\r\n        axios\r\n            .delete(`course/` + courSelected.courseId)\r\n            .then((res) => {\r\n                if (res.status >= 200 && res.status < 300) {\r\n                    console.log(\"borrado con éxito\");\r\n                    setActiveOpen(false);\r\n                    handleReload();\r\n\r\n                } else {\r\n                    console.log(\"Hubo un error\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                let message1 = \"Error\";\r\n                switch (error.response.data.message) {\r\n                    case \"The followuptype doesn't exist\": {\r\n                        message1 = \"El curso que intentas borrar no existe\";\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        message1 = \"Algo salió mal. No fue posible borrar el curso\";\r\n                    }\r\n                }\r\n                //   let message = {\r\n                //     errorMsg: message1,\r\n                //     errorType: \"error\",\r\n                //   };\r\n                console.log(message1)\r\n                //   dispatch(showMessage(message));\r\n            });\r\n\r\n    }\r\n\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n        <Grid container>\r\n            <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                    <TableContainer>\r\n                        <Table\r\n                            className={classes.table}\r\n                            aria-labelledby=\"tableTitle\"\r\n                            size={dense ? \"small\" : \"medium\"}\r\n                            aria-label=\"enhanced table\"\r\n                        >\r\n                            <EnhancedTableHead\r\n                                classes={classes}\r\n                                numSelected={selected.length}\r\n                                order={order}\r\n                                orderBy={orderBy}\r\n                                onRequestSort={handleRequestSort}\r\n                                rowCount={courses.length}\r\n                            />\r\n                            <TableBody>\r\n                                {stableSort(courses, getComparator(order, orderBy)).map(\r\n                                    (row, index) => {\r\n                                        const isItemSelected = isSelected(courses.name);\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n                                        return (\r\n                                            <TableRow\r\n                                                \r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                                key={row.courseId}\r\n                                                aria-checked={isItemSelected}\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\"></TableCell>\r\n                                                <TableCell\r\n                                                    component=\"th\"\r\n                                                    id={labelId}\r\n                                                    scope=\"row\"\r\n                                                    align=\"left\"\r\n                                                >\r\n                                                    {row.courseId}\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    component=\"th\"\r\n                                                    id={labelId}\r\n                                                    scope=\"row\"\r\n                                                    align=\"left\"\r\n                                                >\r\n                                                    {row.nameCourse}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"view\"\r\n                                                    // onClick={() => {\r\n                                                    //     handleClickOpen(row);\r\n                                                    // }}\r\n                                                    >\r\n                                                        <EyeButton color=\"disabled\" />\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n\r\n                                                <TableCell align=\"left\">{row.teacherName}</TableCell>\r\n                                                <TableCell align=\"left\">\r\n                                                    <IconButton>\r\n                                                        <EditIcon\r\n                                                            onClick={() => {\r\n                                                                handleClickOpenEdit(row);\r\n                                                            }}\r\n                                                        />\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">\r\n                                                    <IconButton\r\n                                                        onClick={() => {\r\n                                                            handleClickActiveOpen(row);\r\n                                                        }}\r\n                                                    >\r\n                                                        <DeleteIcon></DeleteIcon>\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n                <Dialog\r\n                    onClose={handleCloseActive}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={activeOpen}\r\n                >\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseActive}>\r\n                        Confirmación\r\n                                </DialogTitle>\r\n                    <DialogContent dividers>\r\n                        <Typography gutterBottom>\r\n\r\n                            {\"¿Está seguro que desea borrar el curso?\"}\r\n                        </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={handleCloseActive} color=\"primary\">\r\n                            No\r\n                                    </Button>\r\n                        <Button autoFocus onClick={deleteCourse} color=\"primary\">\r\n                            Sí\r\n                                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n          open={editCourseOpen}\r\n          onClose={handleCloseEdit}\r\n          aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"responsive-dialog-title\">\r\n            {\"Editar profesor\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              <DialogEdit\r\n                closeEdit={handleCloseEdit}\r\n                reload={reload}\r\n                handleReload={handleReload}\r\n                instId={props.id}\r\n                courseSelected={courseSelected}\r\n              ></DialogEdit>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n        </Dialog>\r\n                \r\n\r\n              \r\n            </div>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    id: state.login.id,\r\n    name: state.login.name,\r\n    email: state.login.email,\r\n    token: state.login.accessToken\r\n\r\n});\r\n\r\nListCourse.propTypes = {\r\n    id: PropTypes.number,\r\n    name: PropTypes.string,\r\n    email: PropTypes.string,\r\n    token: PropTypes.string,\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps)(ListCourse);\r\n\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\course\\dialog-edit.js",["235","236"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport validate from \"validate.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n} from \"@material-ui/core/\";\r\nimport axios from \"../../utils/axios\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  gridContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"2em\",\r\n  },\r\n\r\n  buttonSave: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  select: {\r\n    minWidth: \"90%\",\r\n    marginLeft: \"10%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"50%\",\r\n  },\r\n  date: {\r\n    width: \"50%\",\r\n  },\r\n}));\r\n\r\nconst courseValidate = {\r\n  nameCourse: {\r\n    presence: { allowEmpty: false, message: \"El nombre es requerido\" },\r\n  },\r\n  \r\n};\r\n\r\nconst EditCourse = (props) => {\r\n  const { courseSelected, handleReload, closeEdit,instId } = props;\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [teacher, setTeacher] = React.useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [teachers, setTeachers] = React.useState([]);\r\n  const [courseState, setCourseState] = React.useState({\r\n    isValid: false,\r\n    values: {\r\n      courseId: courseSelected.courseId,\r\n      teacherId: courseSelected.teacherId,\r\n      nameCourse: courseSelected.nameCourse,\r\n      \r\n    },\r\n    touched: {},\r\n    errors: {},\r\n  });\r\n\r\n\r\n  const handleChange = (event) => {\r\n    // event.persist();\r\n\r\n    setCourseState((courseState) => ({\r\n      ...courseState,\r\n      values: {\r\n        ...courseState.values,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n      touched: {\r\n        ...courseState.touched,\r\n        [event.target.name]: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const errors = validate(courseState.values, courseValidate);\r\n    setCourseState((courseState) => ({\r\n      ...courseState,\r\n      isValid: errors ? false : true,\r\n      errors: errors || {},\r\n    }));\r\n  }, [courseState.values]);\r\n\r\n  const hasError = (field) => {\r\n    return courseState.touched[field] && courseState.errors[field]\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  const handleSelect = (event) => {   \r\n    console.log(event.target.value)\r\n    setTeacher(event.target.value);\r\n\r\n  };\r\n\r\n  /* All teachers */\r\n  useEffect(() => {\r\n    if (teachers.length === 0) {\r\n      axios.get(`teacher/all/`+instId).then((res) => {\r\n        setTeachers(res.data);\r\n      });\r\n    }\r\n  }, [teachers]);\r\n\r\n  /*  Method to add a student */\r\n  const handleSubmit = (event) => {\r\n    let data = {\r\n      id: courseState.values.courseId,\r\n      name: courseState.values.nameCourse,\r\n      teacherId: teacher === 0? courseSelected.teacherId:teacher\r\n      \r\n    };\r\n    // handleReload();\r\n   \r\n    axios\r\n      .put(`/course/${data.id}`, data, {\r\n        headers: {\r\n          'x-access-token': props.token\r\n        }\r\n      })\r\n      .then((res) => {\r\n        if (res.status >= 200 && res.status <300) {\r\n          let message = {\r\n            errorMsg: \"Curso actualizado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          dispatch(showMessage(message));\r\n          handleReload();\r\n          closeEdit();\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        let message2 = {\r\n          errorMsg: \"\",\r\n          errorType: \"error\",\r\n        };\r\n        {\r\n          if (err.message.includes(\"403\")) {\r\n             message2 = {\r\n              errorMsg: \"Forbidden\",\r\n            };         \r\n\r\n          } \r\n          else if(err.message.includes(\"401\")){\r\n             message2 = {\r\n              errorMsg: \"Unauthorized\",\r\n            }; \r\n\r\n          }\r\n          else{\r\n            message2 = {\r\n              errorMsg: \"Ha ocurrido un error\",\r\n            }; \r\n          }\r\n        }        \r\n        dispatch(showMessage(message2));\r\n        closeEdit();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n        justify=\"center\"\r\n        \r\n      >\r\n        <Grid item sm={12} className={classes.centrado}>\r\n          <form>\r\n            <Grid\r\n              item\r\n              xs={12}              \r\n              className={classes.centrado}\r\n            >\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label=\"Nombre\"\r\n                name=\"nameCourse\"\r\n                onChange={handleChange}\r\n                error={hasError(\"nameCourse\")}\r\n                defaultValue={courseSelected.nameCourse}\r\n                helperText={\r\n                  hasError(\"nameCourse\") ? \"Debes ingresar un nombre\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n           \r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                 Profesor del curso\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  key={teacher.id}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  value={teacher}\r\n                  onChange={handleSelect}\r\n                >\r\n                  <MenuItem key= {courseSelected.teacherId} value={courseSelected.teacherId}>\r\n                    <em>{courseSelected.teacherName}</em>\r\n                  </MenuItem>\r\n                  {teachers.map((crs) => {\r\n                    return (\r\n                      <MenuItem key={crs.id} value={crs.id}>\r\n                        {crs.name }\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centrado}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            endIcon={<SaveIcon></SaveIcon>}\r\n            disabled={!courseState.isValid}\r\n            onClick={handleSubmit}\r\n          >\r\n            Guardar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  token: state.login.accessToken\r\n});\r\n\r\nEditCourse.propTypes = {\r\n  courseState: PropTypes.any,\r\n  closeEdit: PropTypes.func.isRequired,\r\n  token: PropTypes.string,\r\n};\r\nexport default connect(mapStateToProps)(EditCourse);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\App.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\Login.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\courses\\list-courses.js",[],["237","238"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Home\\Home.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\message-teacher.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\Main.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Minimal\\Minimal.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\create-teacher.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\create-message-parent.js",["239"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, TextField, Button, InputAdornment } from \"@material-ui/core/\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport validate from \"validate.js\";\r\nimport axios from \"../../utils/axios\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  gridContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"2em\",\r\n  },\r\n  componentsItems: {\r\n    marginLeft: \"10%\",\r\n    marginBottom: \"10%\",\r\n  },\r\n  buttonSave: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  title: {\r\n    marginLeft: \"5%\",\r\n    marginTop: \"3%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n    marginBottom: \"10%\",\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  upload: {\r\n    marginTop: \"5%\",\r\n  },\r\n  send: {\r\n    marginTop: \"10%\",\r\n  },\r\n  separate: {\r\n    marginTop: \"5%\",\r\n  },\r\n}));\r\n\r\nconst message = {\r\n  title: {\r\n    presence: { allowEmpty: false, message: \"El asunto es requerido\" },\r\n  },\r\n  message: {\r\n    presence: { allowEmpty: false, message: \"El mensaje es requerido\" },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n};\r\n\r\nconst CreateMessageParent = (props) => {\r\n  const { user } = props;\r\n  const classes = useStyles();\r\n  /* Serve for setting select */\r\n  const [receiver, setReceiver] = React.useState(\"\");\r\n  const [receivers, setReceivers] = React.useState([]);\r\n  const dispatch = useDispatch();\r\n  const [messageState, setMessageState] = React.useState({\r\n    isValid: false,\r\n    values: {},\r\n    touched: {},\r\n    errors: {},\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n\r\n    setMessageState((messageState) => ({\r\n      ...messageState,\r\n      values: {\r\n        ...messageState.values,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n      touched: {\r\n        ...messageState.touched,\r\n        [event.target.name]: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const errors = validate(messageState.values, message);\r\n    setMessageState((messageState) => ({\r\n      ...messageState,\r\n      isValid: errors ? false : true,\r\n      errors: errors || {},\r\n    }));\r\n  }, [messageState.values]);\r\n\r\n  const hasError = (field) => {\r\n    return messageState.touched[field] && messageState.errors[field]\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  /* All receivers that logged teacher know. \r\n  That's mean that he only can see the parent \r\n  who have children in some course with this teacher */\r\n  useEffect(() => {\r\n    if (receivers.length === 0) {\r\n      axios.get(`/teacher/parents/${user}`).then((res) => {\r\n        console.log(res.data);\r\n        setReceivers(res.data);\r\n      });\r\n    }\r\n  }, [receivers]);\r\n\r\n  const getReceivers = () => {\r\n    if (receivers.length !== 0) {\r\n      return receivers;\r\n    } else return [];\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    var fdate = new Date();\r\n    var data = {\r\n      title: messageState.values.title,\r\n      date:\r\n        fdate.getDate() + \"/\" + fdate.getMonth() + \"/\" + fdate.getFullYear(),\r\n      message: messageState.values.message,\r\n      roleReceiver: \"parent\",\r\n      receiver: receiver.id,\r\n      teacher: user.id, //como obtener el Id del teacher\r\n    };\r\n\r\n    axios\r\n      .post(\"/message/\", data)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          let message = {\r\n            errorMsg: \"Mensaje enviado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          dispatch(showMessage(message));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        let message2 = {\r\n          errorMsg: \"Ha ocurrido un error\",\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message2));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.gridContainer}>\r\n        <Grid item sm={6} className={classes.separate}>\r\n          <form className={classes.root}>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Asunto\"\r\n                name=\"title\"\r\n                onChange={handleChange}\r\n                error={hasError(\"title\")}\r\n                helperText={\r\n                  hasError(\"title\") ? \"Debes ingresar un asunto\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <FormControl className={classes.formControl}>\r\n                {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Destinatario\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  value={receiver}\r\n                  onChange={handleSelect}\r\n                  \r\n                >\r\n                  {receivers.map((crs) => {\r\n                    return (\r\n                      <MenuItem key={crs.id} value={crs.id}>\r\n                        {crs.name} {crs.lastname}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select> */}\r\n                <Autocomplete\r\n                  id=\"clear-on-escape\"\r\n                  options={getReceivers()}\r\n                  getOptionLabel={(option) =>\r\n                    option !== \"\" ? option.name + \" \" + option.lastname : option\r\n                  }\r\n                  clearOnEscape\r\n                  style={{ width: \"100%\" }}\r\n                  value={receiver}\r\n                  onChange={(event, newValue) => {\r\n                    event.persist();\r\n                    setReceiver(newValue);\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      margin=\"normal\"\r\n                      id=\"standard-basic\"\r\n                      error={receiver === null}\r\n                      helperText={\r\n                        receivers.lengt === 0\r\n                          ? \"Aún no existen acudientes asignados para ti\"\r\n                          : receiver === null\r\n                          ? \"Debes escoger un acudiente\"\r\n                          : null\r\n                      }\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <PersonIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <input\r\n                accept=\"image/*\"\r\n                className={classes.input}\r\n                id=\"contained-button-file\"\r\n                multiple\r\n                type=\"file\"\r\n              />\r\n              <label htmlFor=\"contained-button-file\">\r\n                <Button\r\n                  startIcon={<AddToPhotosIcon />}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  component=\"span\"\r\n                  className={classes.upload}\r\n                  size=\"small\"\r\n                >\r\n                  Adjuntar imagen\r\n                </Button>\r\n              </label>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item sm={6} className={classes.separate}>\r\n          <form className={classes.root}>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                label=\"Mensaje\"\r\n                placeholder=\"Ingresa enlaces y/o descripción\"\r\n                multiline\r\n                rows={4}\r\n                rowsMax={6}\r\n                name=\"message\"\r\n                onChange={handleChange}\r\n                error={hasError(\"message\")}\r\n                helperText={\r\n                  hasError(\"message\") ? \"Debes ingresar una descripción\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centrado}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            endIcon={<SendIcon></SendIcon>}\r\n            className={classes.send}\r\n            disabled={\r\n              !messageState.isValid || receiver === \"\" || receiver === null\r\n            }\r\n            onClick={handleSubmit}\r\n          >\r\n            Enviar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.login.id,\r\n});\r\n\r\nCreateMessageParent.propTypes = {\r\n  // instid: PropTypes.any,\r\n};\r\nexport default connect(mapStateToProps)(CreateMessageParent);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\main-banner.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\user\\create-student.js",["240"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport validate from \"validate.js\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n} from \"@material-ui/core/\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"../../utils/axios\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  gridContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"2em\",\r\n  },\r\n  componentsItems: {\r\n    marginLeft: \"10%\",\r\n    marginBottom: \"10%\",\r\n  },\r\n  buttonSave: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  select: {\r\n    minWidth: \"90%\",\r\n    marginLeft: \"10%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n  },\r\n  date: {\r\n    width: \"95%\",\r\n    marginLeft: \"8%\",\r\n  },\r\n}));\r\n\r\nconst studentParentValidate = {\r\n  nameStudent: {\r\n    presence: { allowEmpty: false, message: \"El nombre es requerido\" },\r\n  },\r\n  lastNameStudent: {\r\n    presence: { allowEmpty: false, message: \"El apellido es requerido\" },\r\n  },\r\n  documentStudent: {\r\n    presence: { allowEmpty: false, message: \"El registro es requerido\" },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n  nameParent: {\r\n    presence: { allowEmpty: false, message: \"El nombre es requerido\" },\r\n  },\r\n  lastNameParent: {\r\n    presence: { allowEmpty: false, message: \"El apellido es requerido\" },\r\n  },\r\n  documentParent: {\r\n    presence: { allowEmpty: false, message: \"Este campo es requerido\" },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n  email: {\r\n    presence: { allowEmpty: false, message: \"El correo es requerido\" },\r\n    email: true,\r\n  },\r\n  phone: {\r\n    presence: { allowEmpty: false, message: \"El correo es requerido\" },\r\n    format: {\r\n      pattern: /^[+]?([0-9]+(?:[.][0-9]*)?|[0-9]+)$/,\r\n      message: \"Debe ser un número válido\",\r\n    },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n};\r\n\r\nconst CreateStudent = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [course, setCourse] = React.useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [courses, setCourses] = React.useState([]);\r\n  const [studentParent, setStudentParent] = React.useState({\r\n    isValid: false,\r\n    values: {},\r\n    touched: {},\r\n    errors: {},\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n\r\n    setStudentParent((studentParent) => ({\r\n      ...studentParent,\r\n      values: {\r\n        ...studentParent.values,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n      touched: {\r\n        ...studentParent.touched,\r\n        [event.target.name]: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const errors = validate(studentParent.values, studentParentValidate);\r\n    setStudentParent((studentParent) => ({\r\n      ...studentParent,\r\n      isValid: errors ? false : true,\r\n      errors: errors || {},\r\n    }));\r\n  }, [studentParent.values]);\r\n\r\n  const hasError = (field) => {\r\n    return studentParent.touched[field] && studentParent.errors[field]\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  /* Date birthday */\r\n  const [selectedDate, setSelectedDate] = React.useState(\r\n    new Date(\"2018/08/18\")\r\n  );\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const handleSelect = (event) => {\r\n    setCourse(event.target.value);\r\n  };\r\n\r\n  /* All courses */\r\n  useEffect(() => {\r\n    if (courses.length === 0) {\r\n      axios\r\n        .get(\"/course/\", {\r\n          headers: {\r\n            \"x-access-token\": props.token,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          setCourses(res.data);\r\n        });\r\n    }\r\n\r\n    console.log(courses);\r\n  }, [courses]);\r\n\r\n  /*  Method to add a student */\r\n  const handleSubmit = (event) => {\r\n    let data = {\r\n      nameParent: studentParent.values.nameParent,\r\n      lastnameParent: studentParent.values.lastNameParent,\r\n      idDocumentParent: studentParent.values.documentParent,\r\n      email: studentParent.values.email,\r\n      phone: studentParent.values.phone,\r\n      institutionId: 1,\r\n\r\n      nameStudent: studentParent.values.nameStudent,\r\n      lastnameStudent: studentParent.values.lastNameStudent,\r\n      idDocumentStudent: studentParent.values.documentStudent,\r\n      username: studentParent.values.documentStudent,\r\n      dateBirthday: selectedDate,\r\n      courseId: course,\r\n      roleId: 3,\r\n    };\r\n\r\n    axios\r\n      .post(\"/student/\", data)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          let message = {\r\n            errorMsg: \"Estudiante y acudiente creado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          dispatch(showMessage(message));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        let message2 = {\r\n          errorMsg: \"Ha ocurrido un error\",\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message2));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.gridContainer}>\r\n        <Grid item sm={6}>\r\n          <form className={classes.root}>\r\n            <Typography\r\n              className={classes.componentsItems}\r\n              variant=\"h6\"\r\n              color=\"initial\"\r\n            >\r\n              Datos del estudiante:\r\n            </Typography>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Nombres\"\r\n                name=\"nameStudent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"nameStudent\")}\r\n                helperText={\r\n                  hasError(\"nameStudent\") ? \"Debes ingresar un nombre\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Apellidos\"\r\n                name=\"lastNameStudent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"lastNameStudent\")}\r\n                helperText={\r\n                  hasError(\"lastNameStudent\")\r\n                    ? \"Debes ingresar un apellido\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  className={classes.date}\r\n                  margin=\"normal\"\r\n                  id=\"date-picker-dialog\"\r\n                  label=\"Fecha de nacimiento\"\r\n                  format=\"dd/MM/yyyy\"\r\n                  value={selectedDate}\r\n                  onChange={handleDateChange}\r\n                  name=\"birthdayStudent\"\r\n                  invalidDateMessage=\"Fecha ingresada inválida\"\r\n                  maxDateMessage=\"La fecha ingresada es mayor a la fecha actual\"\r\n                  minDateMessage=\"La fecha ingresada es muy antigua\"\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Registro de nacimiento\"\r\n                name=\"documentStudent\"\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n                error={hasError(\"documentStudent\")}\r\n                helperText={\r\n                  hasError(\"documentStudent\")\r\n                    ? \"Debes ingresar el número de documento\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Curso al que pertenece\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  value={course}\r\n                  onChange={handleSelect}\r\n                >\r\n                  <MenuItem value={undefined}>\r\n                    <em>Ninguno</em>\r\n                  </MenuItem>\r\n                  {courses.map((crs) => {\r\n                    return (\r\n                      <MenuItem key={crs.id} value={crs.id}>\r\n                        {crs.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item sm={6}>\r\n          <form className={classes.root}>\r\n            <Typography\r\n              className={classes.componentsItems}\r\n              variant=\"h6\"\r\n              color=\"initial\"\r\n            >\r\n              Datos del acudiente:\r\n            </Typography>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Nombres\"\r\n                name=\"nameParent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"nameParent\")}\r\n                helperText={\r\n                  hasError(\"nameParent\") ? \"Debes ingresar un nombre\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Apellidos\"\r\n                name=\"lastNameParent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"lastNameParent\")}\r\n                helperText={\r\n                  hasError(\"lastNameParent\")\r\n                    ? \"Debes ingresar los apellidos\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"N° de identificación\"\r\n                name=\"documentParent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"documentParent\")}\r\n                helperText={\r\n                  hasError(\"documentParent\")\r\n                    ? \"Debes ingresar un número de identificación\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Correo electrónico\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                error={hasError(\"email\")}\r\n                helperText={\r\n                  hasError(\"email\") ? \"Debes ingresar un correo válido\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Número teléfonico\"\r\n                name=\"phone\"\r\n                onChange={handleChange}\r\n                error={hasError(\"phone\")}\r\n                helperText={\r\n                  hasError(\"phone\")\r\n                    ? \"Debes ingresar un número de contacto\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centrado}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            endIcon={<SaveIcon></SaveIcon>}\r\n            disabled={!studentParent.isValid}\r\n            onClick={handleSubmit}\r\n          >\r\n            Guardar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  idInst: state.login.id,\r\n  name: state.login.name,\r\n  email: state.login.email,\r\n  token: state.login.accessToken,\r\n});\r\n\r\nCreateStudent.propTypes = {\r\n  idInst: PropTypes.number,\r\n  name: PropTypes.string,\r\n  email: PropTypes.string,\r\n  token: PropTypes.string,\r\n};\r\nexport default connect(mapStateToProps)(CreateStudent);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Institution\\meetings.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\student\\dialog-edit.js",["241"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport validate from \"validate.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n} from \"@material-ui/core/\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"../../utils/axios\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  gridContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"2em\",\r\n  },\r\n\r\n  buttonSave: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  select: {\r\n    minWidth: \"90%\",\r\n    marginLeft: \"10%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"50%\",\r\n  },\r\n  date: {\r\n    width: \"50%\",\r\n  },\r\n}));\r\n\r\nconst studentValidate = {\r\n  nameStudent: {\r\n    presence: { allowEmpty: false, message: \"El nombre es requerido\" },\r\n  },\r\n  lastNameStudent: {\r\n    presence: { allowEmpty: false, message: \"El apellido es requerido\" },\r\n  },\r\n  documentStudent: {\r\n    presence: { allowEmpty: false, message: \"El registro es requerido\" },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n};\r\n\r\nconst EditStudent = (props) => {\r\n  const { studentSelected, handleReload, closeEdit } = props;\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [course, setCourse] = React.useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [courses, setCourses] = React.useState([]);\r\n  const [studentState, setStudentState] = React.useState({\r\n    isValid: false,\r\n    values: {\r\n      id: studentSelected.id,\r\n      documentStudent: studentSelected.idDocument,\r\n      nameStudent: studentSelected.name,\r\n      lastNameStudent: studentSelected.lastname,\r\n      courseId: studentSelected.courseId,\r\n    },\r\n    touched: {},\r\n    errors: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (courses.length === 0) {\r\n      axios.get(`/course/${studentSelected.courseId}`).then((res) => {\r\n        setCourse(res.data.id);\r\n      });\r\n    }\r\n  }, [studentSelected]);\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n\r\n    setStudentState((studentState) => ({\r\n      ...studentState,\r\n      values: {\r\n        ...studentState.values,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n      touched: {\r\n        ...studentState.touched,\r\n        [event.target.name]: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const errors = validate(studentState.values, studentValidate);\r\n    setStudentState((studentState) => ({\r\n      ...studentState,\r\n      isValid: errors ? false : true,\r\n      errors: errors || {},\r\n    }));\r\n  }, [studentState.values]);\r\n\r\n  const hasError = (field) => {\r\n    return studentState.touched[field] && studentState.errors[field]\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  /* Date birthday */\r\n  const [selectedDate, setSelectedDate] = React.useState(\r\n    new Date(\"2018/08/18\")\r\n  );\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const handleSelect = (event) => {\r\n    setCourse(event.target.value);\r\n  };\r\n\r\n  /* All courses */\r\n  useEffect(() => {\r\n    if (courses.length === 0) {\r\n      axios.get(\"/course/\").then((res) => {\r\n        setCourses(res.data);\r\n      });\r\n    }\r\n  }, [courses]);\r\n\r\n  /*  Method to add a student */\r\n  const handleSubmit = (event) => {\r\n    let data = {\r\n      id: studentState.values.id,\r\n      nameStudent: studentState.values.nameStudent,\r\n      lastnameStudent: studentState.values.lastNameStudent,\r\n      idDocumentStudent: studentState.values.documentStudent,\r\n      dateBirthday: selectedDate,\r\n      courseId: course,\r\n      roleId: 3,\r\n    };\r\n    handleReload();\r\n    axios\r\n      .put(`/student/${data.id}`, data)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          let message = {\r\n            errorMsg: \"Estudiante actualizado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          dispatch(showMessage(message));\r\n          handleReload();\r\n          closeEdit();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        let message2 = {\r\n          errorMsg: \"Ha ocurrido un error. Inténtalo de nuevo\",\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message2));\r\n        closeEdit();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n        justify=\"center\"\r\n      >\r\n        <Grid item sm={12} className={classes.centrado}>\r\n          <form>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              alignContent=\"center\"\r\n              className={classes.centrado}\r\n            >\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label=\"Nombres\"\r\n                name=\"nameStudent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"nameStudent\")}\r\n                defaultValue={studentSelected.name}\r\n                helperText={\r\n                  hasError(\"nameStudent\") ? \"Debes ingresar un nombre\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label=\"Apellidos\"\r\n                defaultValue={studentSelected.lastname}\r\n                name=\"lastNameStudent\"\r\n                onChange={handleChange}\r\n                error={hasError(\"lastNameStudent\")}\r\n                helperText={\r\n                  hasError(\"lastNameStudent\")\r\n                    ? \"Debes ingresar un apellido\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  className={classes.date}\r\n                  margin=\"normal\"\r\n                  id=\"date-picker-dialog\"\r\n                  label=\"Fecha de nacimiento\"\r\n                  format=\"dd/MM/yyyy\"\r\n                  value={studentSelected.dateBirthday}\r\n                  onChange={handleDateChange}\r\n                  name=\"birthdayStudent\"\r\n                  invalidDateMessage=\"Fecha ingresada inválida\"\r\n                  maxDateMessage=\"La fecha ingresada es mayor a la fecha actual\"\r\n                  minDateMessage=\"La fecha ingresada es muy antigua\"\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label=\"Registro de nacimiento\"\r\n                name=\"documentStudent\"\r\n                type=\"text\"\r\n                defaultValue={studentSelected.idDocument}\r\n                onChange={handleChange}\r\n                error={hasError(\"documentStudent\")}\r\n                helperText={\r\n                  hasError(\"documentStudent\")\r\n                    ? \"Debes ingresar el número de documento\"\r\n                    : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Curso al que pertenece\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  key={course.id}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  value={course}\r\n                  onChange={handleSelect}\r\n                >\r\n                  <MenuItem value={undefined}>\r\n                    <em>Ninguno</em>\r\n                  </MenuItem>\r\n                  {courses.map((crs) => {\r\n                    return (\r\n                      <MenuItem key={crs.id} value={crs.id}>\r\n                        {crs.name}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centrado}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            endIcon={<SaveIcon></SaveIcon>}\r\n            disabled={!studentState.isValid}\r\n            onClick={handleSubmit}\r\n          >\r\n            ACTUALIZAR\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // instid: state.auth.instId,\r\n});\r\n\r\nEditStudent.propTypes = {\r\n  studentSelected: PropTypes.any,\r\n  handleReload: PropTypes.func.isRequired,\r\n  reload: PropTypes.any,\r\n  closeEdit: PropTypes.func.isRequired,\r\n};\r\nexport default connect(mapStateToProps)(EditStudent);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\routes.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\singOut.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\courses\\create.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Institution\\home.js",["242","243"],"import React , { useState, useEffect } from \"react\";\r\nimport { Grid, Paper } from \"@material-ui/core/\";\r\nimport axios from '../../utils/axios';\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport bgd from \"../../img/backgrounds/B7.png\";\r\nimport BannerInstitution from \"../../components/Institution/main\";\r\nimport Teachers from \"../../components/Institution/meetings\";\r\n\r\n// CSS OF THIS TEMPLATE\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  root2: {\r\n    padding: \"2px 4px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  divider: {\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n  divContainer: {\r\n    backgroundImage: `url(${bgd})`,\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n  },\r\n  boxContainer: {\r\n    backgroundColor: \"#9c27b0\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"5%\",\r\n    borderRadius: \"2em\",\r\n    padding: \"2%\",\r\n  },\r\n\r\n  title: {\r\n    marginLeft: \"3%\",\r\n  },\r\n  createStudent: {\r\n    marginBottom: \"3%\",\r\n  },\r\n  sectionMobile: {\r\n    display: \"flex\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"none\",\r\n    },\r\n    marginLeft: \"4%\",\r\n  },\r\n  sectionDesktop: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  paperBanner: {\r\n    backgroundColor: \"#2196f3\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"3%\",\r\n    borderRadius: \"2em\",\r\n    marginTop: \"2%\",\r\n    padding: \"2%\",\r\n    width: \"100%\",\r\n  },\r\n  paperStudents: {\r\n    backgroundColor: \"#d500f9\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"3%\",\r\n    borderRadius: \"2em\",\r\n    marginTop: \"2%\",\r\n    padding: \"2%\",\r\n    width: \"90%\",\r\n  },\r\n  paperMeeting: {\r\n    backgroundColor: \"#00e676\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"3%\",\r\n    borderRadius: \"2em\",\r\n    marginTop: \"2%\",\r\n    padding: \"2%\",\r\n    width: \"90%\",\r\n  },\r\n}));\r\n\r\nconst HomeInstitution = (props) => {\r\n  const classes = useStyles();\r\n  const [reload, setReload] = useState(false);\r\n  const [error, setError]= useState()\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n        \r\n    axios\r\n        .get(`inst/`, {\r\n          headers: {\r\n            'x-access-token': props.token\r\n          }\r\n        })\r\n        .then((res) => {\r\n           if(res.status === 200){\r\n              setError(\"No Error\")\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n          if (err.message.includes(\"403\")) {\r\n            setError(\"Forbidden\")          \r\n\r\n          } \r\n          else if(err.message.includes(\"401\")){\r\n            setError(\"Unauthorized\") \r\n\r\n          }\r\n\r\n        });   \r\n             \r\n\r\n}, [reload]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.divContainer}>\r\n          { (error === \"No Error\")? (\r\n      <Grid container className={classes.root} justify=\"center\">\r\n        <Paper className={classes.paperBanner} elevation={10}>\r\n          <BannerInstitution></BannerInstitution>\r\n        </Paper>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={classes.paperStudents} elevation={10}>\r\n            <Teachers></Teachers>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper className={classes.paperMeeting} elevation={10}>\r\n            <Teachers></Teachers>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>    \r\n    ):(\r\n      <div>      \r\n        <Grid>\r\n        <h1>{error}</h1>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        </Grid>\r\n      \r\n      </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    id: state.login.id,\r\n    name: state.login.name,\r\n    email: state.login.email,\r\n    token: state.login.accessToken\r\n});\r\n\r\nHomeInstitution.propTypes = {\r\n    id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  email: PropTypes.string,\r\n  token: PropTypes.string\r\n  // instid: PropTypes.any,\r\n};\r\nexport default connect(mapStateToProps)(HomeInstitution);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\user\\add-student.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\messages\\create-message-course.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\list-messages.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\messages\\create-message-course.js",["244","245"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, TextField, Button, InputAdornment } from \"@material-ui/core/\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport validate from \"validate.js\";\r\nimport axios from \"../../utils/axios\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport { showMessage } from \"../../actions/actionMessage\";\r\n//import { DropzoneArea } from \"material-ui-dropzone\";\r\nimport { DropzoneDialog } from \"material-ui-dropzone\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n    },\r\n  },\r\n  gridContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"2em\",\r\n  },\r\n  componentsItems: {\r\n    marginLeft: \"10%\",\r\n    marginBottom: \"10%\",\r\n  },\r\n  buttonSave: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  centrado: {\r\n    textAlign: \"center\",\r\n    justifyItems: \"center\",\r\n    marginBottom: \"2%\",\r\n  },\r\n  title: {\r\n    marginLeft: \"5%\",\r\n    marginTop: \"3%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n    marginBottom: \"10%\",\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  upload: {\r\n    marginTop: \"5%\",\r\n  },\r\n  send: {\r\n    marginTop: \"10%\",\r\n  },\r\n  separate: {\r\n    marginTop: \"5%\",\r\n  },\r\n}));\r\n\r\nconst message = {\r\n  title: {\r\n    presence: { allowEmpty: false, message: \"El asunto es requerido\" },\r\n  },\r\n  message: {\r\n    presence: { allowEmpty: false, message: \"El mensaje es requerido\" },\r\n    length: {\r\n      maximum: 64,\r\n      minimum: 1,\r\n    },\r\n  },\r\n};\r\n\r\nconst CreateMessageCourse = (props) => {\r\n  const { user } = props;\r\n  const classes = useStyles();\r\n  /* Serve for setting select */\r\n  const [receiver, setReceiver] = React.useState(\"\");\r\n  const [receivers, setReceivers] = React.useState([]);\r\n  const [wasFound, setWasFound] = React.useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [file, setFile] = React.useState([]);\r\n  const dispatch = useDispatch();\r\n  const [messageState, setMessageState] = React.useState({\r\n    isValid: false,\r\n    values: {},\r\n    touched: {},\r\n    errors: {},\r\n  });\r\n\r\n  /* Init the method to save an image */\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleSave = (file) => {\r\n    setFile(file);\r\n    setOpen(false);\r\n  };\r\n\r\n  /* End to save image file */\r\n\r\n  const handleChange = (event) => {\r\n    event.persist();\r\n\r\n    setMessageState((messageState) => ({\r\n      ...messageState,\r\n      values: {\r\n        ...messageState.values,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n      touched: {\r\n        ...messageState.touched,\r\n        [event.target.name]: true,\r\n      },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const errors = validate(messageState.values, message);\r\n    setMessageState((messageState) => ({\r\n      ...messageState,\r\n      isValid: errors ? false : true,\r\n      errors: errors || {},\r\n    }));\r\n  }, [messageState.values]);\r\n\r\n  const hasError = (field) => {\r\n    return messageState.touched[field] && messageState.errors[field]\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  /* All receivers that logged teacher know. \r\n  That's mean that he only can see the parent \r\n  who have children in some course with this teacher */\r\n  useEffect(() => {\r\n    if (receivers.length === 0 && !wasFound) {\r\n      axios.get(`/teacher/courses/${user}`).then((res) => {\r\n        setReceivers(res.data);\r\n        setWasFound(true);\r\n      });\r\n    }\r\n  }, [receivers]);\r\n\r\n  const getReceivers = () => {\r\n    if (receivers.length !== 0) {\r\n      return receivers;\r\n    } else return [];\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    var fdate = new Date();\r\n    var data = {\r\n      title: messageState.values.title,\r\n      date:\r\n        fdate.getDate() + \"/\" + fdate.getMonth() + \"/\" + fdate.getFullYear(),\r\n      message: messageState.values.message,\r\n      roleReceiver: \"course\",\r\n      receiver: receiver.id,\r\n      teacher: user.id, //como obtener el Id del teacher\r\n    };\r\n\r\n    axios\r\n      .post(\"/message/\", data)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          let message = {\r\n            errorMsg: \"Mensaje enviado con éxito\",\r\n            errorType: \"success\",\r\n          };\r\n          dispatch(showMessage(message));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        let message2 = {\r\n          errorMsg: \"Ha ocurrido un error\",\r\n          errorType: \"error\",\r\n        };\r\n        dispatch(showMessage(message2));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.gridContainer}>\r\n        <Grid item sm={6} className={classes.separate}>\r\n          <form className={classes.root}>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                className={classes.componentsItems}\r\n                id=\"standard-basic\"\r\n                label=\"Asunto\"\r\n                name=\"title\"\r\n                onChange={handleChange}\r\n                error={hasError(\"title\")}\r\n                helperText={\r\n                  hasError(\"title\") ? \"Debes ingresar un asunto\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <FormControl className={classes.formControl}>\r\n                {/* <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Destinatario\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  value={receiver}\r\n                  onChange={handleSelect}\r\n                  \r\n                >\r\n                  {receivers.map((crs) => {\r\n                    return (\r\n                      <MenuItem key={crs.id} value={crs.id}>\r\n                        {crs.name} {crs.lastname}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select> */}\r\n                <Autocomplete\r\n                  id=\"clear-on-escape\"\r\n                  options={getReceivers()}\r\n                  noOptionsText=\"No tiene cursos asociados\"\r\n                  getOptionLabel={(option) =>\r\n                    option !== \"\" ? option.name : option\r\n                  }\r\n                  clearOnEscape\r\n                  style={{ width: \"100%\" }}\r\n                  value={receiver}\r\n                  onChange={(event, newValue) => {\r\n                    event.persist();\r\n                    setReceiver(newValue);\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      label=\"Mis cursos\"\r\n                      {...params}\r\n                      margin=\"normal\"\r\n                      id=\"standard-basic\"\r\n                      error={receiver === null}\r\n                      helperText={\r\n                        receivers.lengt === 0\r\n                          ? \"Aún no existen acudientes asignados para ti\"\r\n                          : receiver === null\r\n                          ? \"Debes escoger un curso\"\r\n                          : null\r\n                      }\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <GroupIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  )}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              {/*  <input\r\n                accept=\"image/*\"\r\n                className={classes.input}\r\n                id=\"contained-button-file\"\r\n                multiple\r\n                type=\"file\"\r\n              />\r\n              <label htmlFor=\"contained-button-file\">\r\n                <Button\r\n                  startIcon={<AddToPhotosIcon />}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  component=\"span\"\r\n                  className={classes.upload}\r\n                  size=\"small\"\r\n                >\r\n                  Adjuntar imagen\r\n                </Button>\r\n              </label> */}\r\n              <div>\r\n                <Button\r\n                  startIcon={<AddToPhotosIcon />}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  component=\"span\"\r\n                  className={classes.upload}\r\n                  size=\"small\"\r\n                  onClick={handleOpen.bind(this)}\r\n                >\r\n                  Adjuntar imagen\r\n                </Button>\r\n                <DropzoneDialog\r\n                  filesLimit={1}\r\n                  dialogTitle=\"Cargar imagen\"\r\n                  cancelButtonText=\"Cancelar\"\r\n                  submitButtonText=\"Cargar\"\r\n                  dropzoneText=\"Arrastre y suelte un archivo aquí o haga clic\"\r\n                  previewText=\"Previsualización:\"\r\n                  open={open}\r\n                  onSave={handleSave.bind(this)}\r\n                  acceptedFiles={[\"image/jpeg\", \"image/png\", \"image/bmp\"]}\r\n                  showPreviews={true}\r\n                  maxFileSize={5000000}\r\n                  onClose={handleClose.bind(this)}\r\n                />\r\n              </div>\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item sm={6} className={classes.separate}>\r\n          <form className={classes.root}>\r\n            <Grid item xs={12} className={classes.centrado}>\r\n              <TextField\r\n                label=\"Mensaje\"\r\n                placeholder=\"Ingresa enlaces y/o descripción\"\r\n                multiline\r\n                rows={4}\r\n                rowsMax={6}\r\n                name=\"message\"\r\n                onChange={handleChange}\r\n                error={hasError(\"message\")}\r\n                helperText={\r\n                  hasError(\"message\") ? \"Debes ingresar una descripción\" : null\r\n                }\r\n              />\r\n            </Grid>\r\n          </form>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centrado}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            endIcon={<SendIcon></SendIcon>}\r\n            className={classes.send}\r\n            disabled={\r\n              !messageState.isValid || receiver === \"\" || receiver === null\r\n            }\r\n            onClick={handleSubmit}\r\n          >\r\n            Enviar\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.login.id,\r\n});\r\n\r\nCreateMessageCourse.propTypes = {\r\n  // instid: PropTypes.any,\r\n};\r\nexport default connect(mapStateToProps)(CreateMessageCourse);\r\n","C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Footer\\index.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Footer\\Footer.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\feedback.js",["246","247","248"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\content.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\Home\\Content.js",["249","250","251","252","253","254"],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\themes\\theme.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\actions\\auth.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\teacher\\home\\meeting-teacher.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\configRouter\\RouteWithLayout.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\pages\\teacher\\list-teacher.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\layouts\\Main\\components\\Topbar\\Topbar.js",[],"C:\\Users\\Laura\\Desktop\\Universidad\\2021-1\\PDG\\PDG2\\front-pdg\\src\\components\\Index\\resource.js",[],{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"255","replacedBy":"259"},{"ruleId":"257","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":25,"column":7,"nodeType":"263","messageId":"264","endLine":25,"endColumn":18},{"ruleId":"265","severity":1,"message":"266","line":329,"column":6,"nodeType":"267","endLine":329,"endColumn":25,"suggestions":"268"},{"ruleId":"265","severity":1,"message":"266","line":334,"column":6,"nodeType":"267","endLine":334,"endColumn":14,"suggestions":"269"},{"ruleId":"255","replacedBy":"270"},{"ruleId":"257","replacedBy":"271"},{"ruleId":"261","severity":1,"message":"272","line":151,"column":11,"nodeType":"263","messageId":"264","endLine":151,"endColumn":18},{"ruleId":"265","severity":1,"message":"273","line":340,"column":6,"nodeType":"267","endLine":340,"endColumn":25,"suggestions":"274"},{"ruleId":"265","severity":1,"message":"273","line":345,"column":6,"nodeType":"267","endLine":345,"endColumn":14,"suggestions":"275"},{"ruleId":"261","severity":1,"message":"276","line":71,"column":7,"nodeType":"263","messageId":"264","endLine":71,"endColumn":13},{"ruleId":"261","severity":1,"message":"277","line":128,"column":11,"nodeType":"263","messageId":"264","endLine":128,"endColumn":28},{"ruleId":"261","severity":1,"message":"278","line":309,"column":19,"nodeType":"263","messageId":"264","endLine":309,"endColumn":27},{"ruleId":"261","severity":1,"message":"279","line":313,"column":22,"nodeType":"263","messageId":"264","endLine":313,"endColumn":33},{"ruleId":"261","severity":1,"message":"280","line":316,"column":12,"nodeType":"263","messageId":"264","endLine":316,"endColumn":17},{"ruleId":"261","severity":1,"message":"281","line":319,"column":12,"nodeType":"263","messageId":"264","endLine":319,"endColumn":23},{"ruleId":"261","severity":1,"message":"282","line":319,"column":25,"nodeType":"263","messageId":"264","endLine":319,"endColumn":39},{"ruleId":"265","severity":1,"message":"283","line":353,"column":8,"nodeType":"267","endLine":353,"endColumn":16,"suggestions":"284"},{"ruleId":"265","severity":1,"message":"285","line":134,"column":6,"nodeType":"267","endLine":134,"endColumn":16,"suggestions":"286"},{"ruleId":"287","severity":1,"message":"288","line":168,"column":9,"nodeType":"289","messageId":"290","endLine":186,"endColumn":10},{"ruleId":"255","replacedBy":"291"},{"ruleId":"257","replacedBy":"292"},{"ruleId":"265","severity":1,"message":"293","line":135,"column":6,"nodeType":"267","endLine":135,"endColumn":17,"suggestions":"294"},{"ruleId":"265","severity":1,"message":"295","line":188,"column":6,"nodeType":"267","endLine":188,"endColumn":15,"suggestions":"296"},{"ruleId":"265","severity":1,"message":"297","line":101,"column":6,"nodeType":"267","endLine":101,"endColumn":23,"suggestions":"298"},{"ruleId":"261","severity":1,"message":"299","line":101,"column":18,"nodeType":"263","messageId":"264","endLine":101,"endColumn":27},{"ruleId":"265","severity":1,"message":"295","line":133,"column":4,"nodeType":"267","endLine":133,"endColumn":12,"suggestions":"300"},{"ruleId":"261","severity":1,"message":"301","line":90,"column":10,"nodeType":"263","messageId":"264","endLine":90,"endColumn":14},{"ruleId":"265","severity":1,"message":"302","line":157,"column":6,"nodeType":"267","endLine":157,"endColumn":17,"suggestions":"303"},{"ruleId":"261","severity":1,"message":"304","line":3,"column":8,"nodeType":"263","messageId":"264","endLine":3,"endColumn":17},{"ruleId":"261","severity":1,"message":"305","line":117,"column":11,"nodeType":"263","messageId":"264","endLine":117,"endColumn":19},{"ruleId":"261","severity":1,"message":"306","line":219,"column":21,"nodeType":"263","messageId":"264","endLine":219,"endColumn":28},{"ruleId":"261","severity":1,"message":"307","line":1,"column":28,"nodeType":"263","messageId":"264","endLine":1,"endColumn":37},{"ruleId":"261","severity":1,"message":"308","line":3,"column":8,"nodeType":"263","messageId":"264","endLine":3,"endColumn":13},{"ruleId":"261","severity":1,"message":"309","line":81,"column":10,"nodeType":"263","messageId":"264","endLine":81,"endColumn":16},{"ruleId":"261","severity":1,"message":"299","line":81,"column":18,"nodeType":"263","messageId":"264","endLine":81,"endColumn":27},{"ruleId":"261","severity":1,"message":"280","line":82,"column":10,"nodeType":"263","messageId":"264","endLine":82,"endColumn":15},{"ruleId":"261","severity":1,"message":"310","line":82,"column":17,"nodeType":"263","messageId":"264","endLine":82,"endColumn":25},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],["311"],["312"],"no-unused-vars","'studentTest' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTeachers'. Either include it or remove the dependency array.","ArrayExpression",["313"],["314"],["311"],["312"],"'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudents'. Either include it or remove the dependency array.",["315"],["316"],"'course' is assigned a value but never used.","'createSortHandler' is assigned a value but never used.","'setDense' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'error' is assigned a value but never used.","'courseState' is assigned a value but never used.","'setCourseState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.id' and 'props.token'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has a missing dependency: 'instId'. Either include it or remove the dependency array.",["318"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["311"],["312"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'props.token'. Either include it or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: 'courses.length'. Either include it or remove the dependency array.",["321"],"'setReload' is assigned a value but never used.",["322"],"'file' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user' and 'wasFound'. Either include them or remove the dependency array.",["323"],"'PropTypes' is defined but never used.","'dispatch' is assigned a value but never used.","'message' is assigned a value but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'reload' is assigned a value but never used.","'setError' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},"Update the dependencies array to be: [getTeachers, page, rowsPerPage]",{"range":"346","text":"347"},"Update the dependencies array to be: [getTeachers, reload]",{"range":"348","text":"349"},"Update the dependencies array to be: [getStudents, page, rowsPerPage]",{"range":"350","text":"351"},"Update the dependencies array to be: [getStudents, reload]",{"range":"352","text":"353"},"Update the dependencies array to be: [props.id, props.token, reload]",{"range":"354","text":"355"},"Update the dependencies array to be: [instId, teachers]",{"range":"356","text":"357"},"Update the dependencies array to be: [receivers, user]",{"range":"358","text":"359"},"Update the dependencies array to be: [courses, props.token]",{"range":"360","text":"361"},"Update the dependencies array to be: [courses.length, studentSelected]",{"range":"362","text":"363"},"Update the dependencies array to be: [props.token, reload]",{"range":"364","text":"365"},"Update the dependencies array to be: [receivers, user, wasFound]",{"range":"366","text":"367"},[9111,9130],"[getTeachers, page, rowsPerPage]",[9207,9215],"[getTeachers, reload]",[9463,9482],"[getStudents, page, rowsPerPage]",[9559,9567],"[getStudents, reload]",[10874,10882],"[props.id, props.token, reload]",[3043,3053],"[instId, teachers]",[3396,3407],"[receivers, user]",[4412,4421],"[courses, props.token]",[2519,2536],"[courses.length, studentSelected]",[2921,2929],"[props.token, reload]",[3949,3960],"[receivers, user, wasFound]"]